   function loadContent() {
   loadBlog();
 }

function loadBlog() {
    loadTitle();
    loadSubtitle();
    loadDate();
    loadBody();
}

function loadTitle() {
    var category = `<u>Branchin</u>g 方`;                          //ALTER THIS<~ 1/4
    document.getElementById('blog-title').innerHTML = 
    category;
}

function loadSubtitle() {
    var title = `Navigating the Player-Designer Gap`;
    document.getElementById('blog-subtitle').innerHTML = 
    title;                                  //ALTER THIS<~ 2/4
}

function loadDate() {
    document.getElementById('blog-date').innerHTML = 
    `2024-06-26`;                                       //ALTER THIS<~ 3/4
}

function loadBody() {
    document.getElementById('blog-content').innerHTML =                 //ALTER THIS<~ 4/4
    `
    <p> 
    Developing things is one of the more satisfying and fun things that I've done. It's really engaging to take the desperate parts of something and work them together, creating a (hopefully) cohesive experience. It's perhaps too enjoyable at times, and it can be easy to dedicate a lot of time to something that is actually not satisfying from the audience perspective. This is something that extends past games to the development of other media types, however I believe that game development, as is often the case, twists the problem in stranger ways than other media does. I'd like to explore and develop this idea, in the hopes that it brings into focus things that otherwise may escape awareness at times during the development process. </br></br>There are many aspects that  make something like developing a game fulfilling. Especially for a smaller team, that means that you are likely going to be responsible for a broader set of things. When you lay it out, many games require handling rendering, physics, sound, heuristics, integration of systems, sound logic, storytelling, and probably other things depending on the game. The design, prototyping, and iterating can be one of the more fun aspects, especially programming and level design. For those inclined to solve puzzles, developing a robust system can be really fun, and it's easy to get lost fleshing out something while losing sight of how it fits into the overall design, or what aspects of that piece is actually impactful to the player, or even noticeable at all.  </br></br>For instance, the well-known flags notifying you that your choice has had in impact that Telltale Games had used liberally sticks out as a good example of developers grappling with this concept. There are choices being made throughout the game constantly, and the differentiation of choices and the felt expression of and validation of the choices that are made can be hard to communicate. The successful linking of events to consequence can be a bit difficult when the play space is saturated with choices, especially when they become further removed over time. The flagging of a meaningful choice in this manner is effective in highlighting things the developer wishes for the player to focus on, and it is effective. Thinking of what the experience is like without those kinds of flourishes, it may be more difficult to appreciate that something impactful has been chosen, apart from the many choices on either side of it. No matter what complex, interesting thing is going on behind the scenes, there is generally diminishing returns on development of one portion, with less being translated overall to player experience. </br></br>It is common to hear the advice that you should look at whatever you are creating from the target audience perspective, and imagine what they would like to see, experience, and seek out. Equally important, and distinct, is being mindful of how they would actually experience it, without the expectations and intentions clouding things. While looking at something, especially something that you have been designing and working with over a long period of time, it is important to get feedback, or to create space between the creation process and analyzing things from a more detached perspective. In reading a book, *** ** *** by *** ** ***, they recommended that to quell the framed romanticization, it is sometimes more fruitful to treat it as a job. While it is alluring to frame art as something special and meaningful, especially when it is personal, I have found that this does not actually serve me, and it has been helpful to adopt the position of framing it as a job. With a job, the book states, you show up and do the work, even if you don't feel like it. There isn't a choice, it is just something that you do.  </br></br>I find this kind of perspective shift is helpful in distancing yourself from what you are creating, to take on an imagined audience member, and try to see things without the background knowledge and intention of the experience. There isn't a replacement for actual outside review, but in developing the skill of taking a step back and compartmentalizing your intention from what may be experienced outside the light of your intent may help to focus your efforts on what is impactful and fun to experience from the user side of things, rather than what is more satisfying to develop. </br></br>There are many instances where developers have recounted that they spent a lot of time developing robust artificial intelligence for their games, tweaking and experimenting with the system to have their entities approach something that felt more full of life and agency. Many times, a more satisfying and realistic behavioral system can be found with a relatively simplistic and unsophisticated approach, like a small state machine. Developing a fancy artificial intelligence model can be more satisfying and interesting from a developmental standpoint, but the cost of time and energy in that system versus what is often the lackluster comparative result is a strong case that it may not be in your best interest to invest in that kind of a system, depending on what you are making. The sunk cost of developing something like that can make it increasingly difficult to accept that it isn't providing the user experience that you desire, and the ability to see that and pivot when you are pouring time into something that isn't in your best interest can be the difference between advancing a project and burning out completely. </br></br>I spend an incredibly large amount of time on the development of a procedurally generated world, inspired by the innovative Dwarf Fortress, which I have been fascinated with since I became aware of it's existence. I sunk a lot of time and effort into creating and tweaking different systems so that the landmass was simulated and developed, with biomes forming, rivers running, and weather interacting with topography in order to generate landmasses. I am disheartened to say that I don't believe I even have access to this code anymore. Suffice it to say, I spent way too much time and effort perfecting this instead of concerning myself with design aspects, getting a minimum viable product, or fleshing out other aspects of my game. Soon I was pretty burnt out, due to having a lack of direction, and with nothing more than a generative algorithm for a procedural landmass, I fell off of the project. With so much time spent, how much would anyone appreciate a month of work? Would they even know that the weather was not shaping the arcs of the mountain ranges, or the placement of the dry regions relative to the swamps?  </br></br>It can save a lot of time, and even the project, if you plan to view things from the target audience perspective, and be mindful to look constantly at the experience you are developing. Getting lost in the design and programmatic aspects because they are enjoyable in themselves may be a trap you set for yourself; a subtle way of procrastinating, or of not moving your project forward. It can be frightening to analyze your work this way, or to seek outside feedback. It is much worse to have your project falter and die off because you get lost in the weeds making small changes and not getting feedback. It may be that the land generation didn't end up working with how the game rolled out, and could I have convinced myself to let go of that component if I had spent so much time on it? </br></br>Many players do not care about the specifics of your implementation, or of the intention behind your experience. What players actually experience, and how the game feels and appears is all that matters. It is similar to the discussion of the intent of an action versus how the meaning was received. When I discussed active listening two posts ago, a part of it that I did not mention was how things are processed. In communication there is the intention, then the translation of that into output. That becomes the input for the listener, who again processes it through their own filters and makes sense of it within their understanding of context and framing. The same kind of thing is occurring with players interacting with a game, however there is no opportunity for clarification or expression of intent. And if you mean  to compliment someone, and they take offense to it, then that does not mean that you share no responsibility. You control your actions, and not the consequences. Keeping this in mind, I'm trying to impart the importance of keeping the target audience in mind. Their experience matters much more than the intent of the work. </br></br>

    </p>
    `;
}